name: Gateway CI/CD # 名称をCI/CDに変更するとより実態に合います

on:
  push:
    branches: [ main ] # mainブランチにプッシュされた時のみデプロイを実行
    paths:
      - 'gateway/**'
      - '.github/workflows/gateway-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'gateway/**'
      - '.github/workflows/gateway-ci.yml'

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }} # 例: us-central1
  CLOUD_RUN_SERVICE_NAME: ${{ secrets.CLOUD_RUN_SERVICE_NAME }} # 例: guchi-gateway
  ARTIFACT_REGISTRY_REPOSITORY: ${{ secrets.ARTIFACT_REGISTRY_REPOSITORY }} # 例: guchi-app-images
  IMAGE_NAME: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REGISTRY_REPOSITORY }}/${{ secrets.CLOUD_RUN_SERVICE_NAME }}

jobs:
  gateway-test: # ジョブ名を gateway-test から test に変更すると deploy ジョブの needs と合わせやすい
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./gateway
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Dockerfile内のPythonバージョンと合わせるのが理想
    - name: Install dependencies
      run: pip install -r requirements.txt
    - name: Run Lint (flake8)
      run: |
        pip install flake8
        flake8 . --exclude=venv,.venv,__pycache__ --count --select=E9,F63,F7,F82 --show-source --statistics
    - name: Check if Flask app runs # Pythonファイルのコンパイルチェックは限定的。可能なら簡単なテストを実行する
      run: python -m py_compile main.py
      # pytest を使う場合は以下のようなステップを追加
      # - name: Test with pytest
      #   run: |
      #     pip install pytest
      #     pytest

  deploy:
    needs: gateway-test # gateway-test ジョブが成功した場合のみ実行 (ジョブ名注意)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'
      # with:
      #   project_id: ${{ secrets.GCP_PROJECT_ID }} # ここでプロジェクトIDを指定しても良い

    - name: Configure Docker
      run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

    - name: Build and push Docker image
      env:
        IMAGE_TAG: ${{ github.sha }} # コミットSHAをタグとして使用
      run: |-
        docker build -t ${{ env.IMAGE_NAME }}:${IMAGE_TAG} -t ${{ env.IMAGE_NAME }}:latest ./gateway
        docker push ${{ env.IMAGE_NAME }}:${IMAGE_TAG}
        docker push ${{ env.IMAGE_NAME }}:latest

    - name: Deploy to Cloud Run
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |-
        gcloud run deploy ${{ env.CLOUD_RUN_SERVICE_NAME }} \
          --image ${{ env.IMAGE_NAME }}:${IMAGE_TAG} \
          --region ${{ env.GCP_REGION }} \
          --platform managed \
          --quiet \
          --allow-unauthenticated \
          # --service-account=<Cloud Runが使用するサービスアカウントのメール> \
          # .env ファイルの内容をCloud Runの環境変数として設定する必要がある
          --update-env-vars="PROJECT_ID=${{ env.GCP_PROJECT_ID }},REGION=${{ env.GCP_REGION }},DEFAULT_RESOURCE_ID=${{ secrets.DEFAULT_RESOURCE_ID_FOR_RUN }}"
          # GOOGLE_APPLICATION_CREDENTIALS はCloud Runでは通常不要（サービスアカウントを指定するため）
          # ただし、Cloud Runサービスがデフォルト以外のSAを使う場合、そのSAにVertex AI Userロールなどが必要
          # シークレットはSecret Managerに保存し、--set-secretsでマウントするのがベストプラクティス
          # --set-secrets="DEFAULT_RESOURCE_ID=your-secret-id:latest"