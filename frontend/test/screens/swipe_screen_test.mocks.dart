// Mocks generated by Mockito 5.4.6 from annotations
// in frontend/test/screens/swipe_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter/src/widgets/navigator.dart' as _i7;
import 'package:frontend/models/book_recommendation.dart' as _i6;
import 'package:frontend/models/chat_models.dart' as _i3;
import 'package:frontend/models/graph_data.dart' as _i2;
import 'package:frontend/services/api_service.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGraphData_0 extends _i1.SmartFake implements _i2.GraphData {
  _FakeGraphData_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAnalysisSummary_1 extends _i1.SmartFake
    implements _i3.AnalysisSummary {
  _FakeAnalysisSummary_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeChatResponse_2 extends _i1.SmartFake implements _i3.ChatResponse {
  _FakeChatResponse_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNodeTapResponse_3 extends _i1.SmartFake
    implements _i3.NodeTapResponse {
  _FakeNodeTapResponse_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i4.ApiService {
  @override
  _i5.Future<_i3.HomeSuggestion?> getHomeSuggestionV2() =>
      (super.noSuchMethod(
            Invocation.method(#getHomeSuggestionV2, []),
            returnValue: _i5.Future<_i3.HomeSuggestion?>.value(),
            returnValueForMissingStub: _i5.Future<_i3.HomeSuggestion?>.value(),
          )
          as _i5.Future<_i3.HomeSuggestion?>);

  @override
  _i5.Future<List<String>> getTopicSuggestions() =>
      (super.noSuchMethod(
            Invocation.method(#getTopicSuggestions, []),
            returnValue: _i5.Future<List<String>>.value(<String>[]),
            returnValueForMissingStub: _i5.Future<List<String>>.value(
              <String>[],
            ),
          )
          as _i5.Future<List<String>>);

  @override
  _i5.Future<_i3.HomeSuggestion?> getHomeSuggestion() =>
      (super.noSuchMethod(
            Invocation.method(#getHomeSuggestion, []),
            returnValue: _i5.Future<_i3.HomeSuggestion?>.value(),
            returnValueForMissingStub: _i5.Future<_i3.HomeSuggestion?>.value(),
          )
          as _i5.Future<_i3.HomeSuggestion?>);

  @override
  _i5.Future<_i2.GraphData> getAnalysisGraph() =>
      (super.noSuchMethod(
            Invocation.method(#getAnalysisGraph, []),
            returnValue: _i5.Future<_i2.GraphData>.value(
              _FakeGraphData_0(this, Invocation.method(#getAnalysisGraph, [])),
            ),
            returnValueForMissingStub: _i5.Future<_i2.GraphData>.value(
              _FakeGraphData_0(this, Invocation.method(#getAnalysisGraph, [])),
            ),
          )
          as _i5.Future<_i2.GraphData>);

  @override
  _i5.Future<_i3.AnalysisSummary> getAnalysisSummary() =>
      (super.noSuchMethod(
            Invocation.method(#getAnalysisSummary, []),
            returnValue: _i5.Future<_i3.AnalysisSummary>.value(
              _FakeAnalysisSummary_1(
                this,
                Invocation.method(#getAnalysisSummary, []),
              ),
            ),
            returnValueForMissingStub: _i5.Future<_i3.AnalysisSummary>.value(
              _FakeAnalysisSummary_1(
                this,
                Invocation.method(#getAnalysisSummary, []),
              ),
            ),
          )
          as _i5.Future<_i3.AnalysisSummary>);

  @override
  _i5.Future<List<_i6.BookRecommendation>> getBookRecommendations() =>
      (super.noSuchMethod(
            Invocation.method(#getBookRecommendations, []),
            returnValue: _i5.Future<List<_i6.BookRecommendation>>.value(
              <_i6.BookRecommendation>[],
            ),
            returnValueForMissingStub:
                _i5.Future<List<_i6.BookRecommendation>>.value(
                  <_i6.BookRecommendation>[],
                ),
          )
          as _i5.Future<List<_i6.BookRecommendation>>);

  @override
  _i5.Future<_i3.NodeTapResponse?> getProactiveSuggestion() =>
      (super.noSuchMethod(
            Invocation.method(#getProactiveSuggestion, []),
            returnValue: _i5.Future<_i3.NodeTapResponse?>.value(),
            returnValueForMissingStub: _i5.Future<_i3.NodeTapResponse?>.value(),
          )
          as _i5.Future<_i3.NodeTapResponse?>);

  @override
  _i5.Future<_i3.ChatResponse> postChatMessage({
    required List<Map<String, String>>? chatHistory,
    required String? message,
    bool? useRag = false,
    String? ragType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#postChatMessage, [], {
              #chatHistory: chatHistory,
              #message: message,
              #useRag: useRag,
              #ragType: ragType,
            }),
            returnValue: _i5.Future<_i3.ChatResponse>.value(
              _FakeChatResponse_2(
                this,
                Invocation.method(#postChatMessage, [], {
                  #chatHistory: chatHistory,
                  #message: message,
                  #useRag: useRag,
                  #ragType: ragType,
                }),
              ),
            ),
            returnValueForMissingStub: _i5.Future<_i3.ChatResponse>.value(
              _FakeChatResponse_2(
                this,
                Invocation.method(#postChatMessage, [], {
                  #chatHistory: chatHistory,
                  #message: message,
                  #useRag: useRag,
                  #ragType: ragType,
                }),
              ),
            ),
          )
          as _i5.Future<_i3.ChatResponse>);

  @override
  _i5.Future<_i3.NodeTapResponse> handleNodeTap(String? nodeLabel) =>
      (super.noSuchMethod(
            Invocation.method(#handleNodeTap, [nodeLabel]),
            returnValue: _i5.Future<_i3.NodeTapResponse>.value(
              _FakeNodeTapResponse_3(
                this,
                Invocation.method(#handleNodeTap, [nodeLabel]),
              ),
            ),
            returnValueForMissingStub: _i5.Future<_i3.NodeTapResponse>.value(
              _FakeNodeTapResponse_3(
                this,
                Invocation.method(#handleNodeTap, [nodeLabel]),
              ),
            ),
          )
          as _i5.Future<_i3.NodeTapResponse>);

  @override
  _i5.Future<Map<String, dynamic>> startSession(String? topic) =>
      (super.noSuchMethod(
            Invocation.method(#startSession, [topic]),
            returnValue: _i5.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
            returnValueForMissingStub: _i5.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i5.Future<Map<String, dynamic>>);

  @override
  _i5.Future<void> recordSwipe({
    required String? sessionId,
    required String? questionId,
    required bool? answer,
    required double? hesitationTime,
    required int? swipeSpeed,
    required int? turn,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#recordSwipe, [], {
              #sessionId: sessionId,
              #questionId: questionId,
              #answer: answer,
              #hesitationTime: hesitationTime,
              #swipeSpeed: swipeSpeed,
              #turn: turn,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> postSummary({required String? sessionId}) =>
      (super.noSuchMethod(
            Invocation.method(#postSummary, [], {#sessionId: sessionId}),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<Map<String, dynamic>> continueSession({
    required String? sessionId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#continueSession, [], {#sessionId: sessionId}),
            returnValue: _i5.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
            returnValueForMissingStub: _i5.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i5.Future<Map<String, dynamic>>);
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i7.NavigatorObserver {
  @override
  void didPush(_i7.Route<dynamic>? route, _i7.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
        Invocation.method(#didPush, [route, previousRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didPop(_i7.Route<dynamic>? route, _i7.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
        Invocation.method(#didPop, [route, previousRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didRemove(
    _i7.Route<dynamic>? route,
    _i7.Route<dynamic>? previousRoute,
  ) => super.noSuchMethod(
    Invocation.method(#didRemove, [route, previousRoute]),
    returnValueForMissingStub: null,
  );

  @override
  void didReplace({
    _i7.Route<dynamic>? newRoute,
    _i7.Route<dynamic>? oldRoute,
  }) => super.noSuchMethod(
    Invocation.method(#didReplace, [], {
      #newRoute: newRoute,
      #oldRoute: oldRoute,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void didChangeTop(
    _i7.Route<dynamic>? topRoute,
    _i7.Route<dynamic>? previousTopRoute,
  ) => super.noSuchMethod(
    Invocation.method(#didChangeTop, [topRoute, previousTopRoute]),
    returnValueForMissingStub: null,
  );

  @override
  void didStartUserGesture(
    _i7.Route<dynamic>? route,
    _i7.Route<dynamic>? previousRoute,
  ) => super.noSuchMethod(
    Invocation.method(#didStartUserGesture, [route, previousRoute]),
    returnValueForMissingStub: null,
  );

  @override
  void didStopUserGesture() => super.noSuchMethod(
    Invocation.method(#didStopUserGesture, []),
    returnValueForMissingStub: null,
  );
}
