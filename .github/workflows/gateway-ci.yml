name: Gateway CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'gateway/**'
      - '.github/workflows/gateway-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'gateway/**'
      - '.github/workflows/gateway-ci.yml'

# --- ワークフロー全体で使う環境変数を定義 ---
env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  CLOUD_RUN_SERVICE_NAME: ${{ secrets.CLOUD_RUN_SERVICE_NAME }}
  ARTIFACT_REGISTRY_REPOSITORY: ${{ secrets.ARTIFACT_REGISTRY_REPOSITORY }}
  IMAGE_NAME: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REGISTRY_REPOSITORY }}/${{ secrets.CLOUD_RUN_SERVICE_NAME }}

jobs:
  gateway-test:
    runs-on: ubuntu-latest
    env:
      PROD_ORIGIN_URL: http://test.local
    defaults:
      run:
        working-directory: ./gateway
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python and cache dependencies
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        # pipのキャッシュを有効にし、requirements.txtの内容に基づいてキャッシュを管理
        cache: 'pip'
        cache-dependency-path: gateway/requirements.txt

    - name: Install dependencies
      # ネットワークの不安定さに備え、タイムアウトを60秒に延長
      run: pip install -r requirements.txt --timeout=60

    - name: Run pytest
      run: |
        # プロジェクトルートからテストを実行する必要があるため、一時的に一つ上の階層に移動
        cd ..
        python -m pytest gateway/

    - name: Run Lint (flake8)
      run: |
        pip install flake8
        flake8 . --exclude=venv,.venv,__pycache__ --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Check if Flask app runs
      run: python -m py_compile main.py

  deploy:
    needs: gateway-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Configure Docker
      run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

    - name: Build and push Docker image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |-
        docker build -t ${{ env.IMAGE_NAME }}:${IMAGE_TAG} -t ${{ env.IMAGE_NAME }}:latest ./gateway
        docker push ${{ env.IMAGE_NAME }}:${IMAGE_TAG}
        docker push ${{ env.IMAGE_NAME }}:latest

    - name: Deploy to Cloud Run
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |-
        # --- ここからデバッグ用のechoコマンド ---
        echo "--- Debugging Environment Variables ---"
        echo "TASK_QUEUE: ${{ secrets.GCP_TASK_QUEUE }}"
        echo "TASK_QUEUE_LOCATION: ${{ secrets.GCP_TASK_QUEUE_LOCATION }}"
        echo "TASK_SA_EMAIL: ${{ secrets.GCP_TASK_SA_EMAIL }}"
        echo "--- End Debugging ---"
        # --- ここまで ---
        gcloud run deploy ${{ env.CLOUD_RUN_SERVICE_NAME }} \
          --image ${{ env.IMAGE_NAME }}:${IMAGE_TAG} \
          --region ${{ env.GCP_REGION }} \
          --platform managed \
          --quiet \
          --allow-unauthenticated \
          --service-account=${{ secrets.GCP_SERVICE_ACCOUNT }} \
          --update-secrets=google-books-api-key=google-books-api-key:latest \
          --update-env-vars='GCP_VERTEX_AI_REGION=${{ secrets.GCP_VERTEX_AI_REGION }},GCP_GEMINI_REGION=${{ secrets.GCP_GEMINI_REGION }},GEMINI_FLASH_NAME=${{ secrets.GEMINI_FLASH_NAME }},GEMINI_PRO_NAME=${{ secrets.GEMINI_PRO_NAME }},SIMILAR_CASES_ENGINE_ID=${{ secrets.SIMILAR_CASES_ENGINE_ID }},SUGGESTIONS_ENGINE_ID=${{ secrets.SUGGESTIONS_ENGINE_ID }},VECTOR_SEARCH_INDEX_ID=${{ secrets.VECTOR_SEARCH_INDEX_ID }},VECTOR_SEARCH_ENDPOINT_ID=${{ secrets.VECTOR_SEARCH_ENDPOINT_ID }},VECTOR_SEARCH_DEPLOYED_INDEX_ID=${{ secrets.VECTOR_SEARCH_DEPLOYED_INDEX_ID }},GCP_TASK_QUEUE=${{ secrets.GCP_TASK_QUEUE }},GCP_TASK_QUEUE_LOCATION=${{ secrets.GCP_TASK_QUEUE_LOCATION }},GCP_TASK_SA_EMAIL=${{ secrets.GCP_TASK_SA_EMAIL }},K_SERVICE_URL=${{ secrets.K_SERVICE_URL }},OLLAMA_ENDPOINT=${{ secrets.OLLAMA_ENDPOINT }},OLLAMA_MODEL_NAME=${{ secrets.OLLAMA_MODEL_NAME }},PROD_ORIGIN_URL=${{ secrets.PROD_ORIGIN_URL }}'